;;3.4.2 machanisms for controlling concurrncy
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
      (begin (set! balance (- balance amount))
             balance)
      "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((protected (make-serializer)))
   (define (dispatch m)
     (cond ((eq? m 'withdraw) (protected withdraw))
           ((eq? m 'deposit ) (protected deposit))
           ((eq? m balance) balance)
           (else (error "Unknown request -- MAKE-ACCOUNT" m))))
   dispatch))



(load "/home/project/scheme/Ex3.39.scm")


(define (make-account-and-serializer balance)
  (define (withdraw amount)
    (if (>= balance amount)
      (begin (set! balance (- balance amount))
             balance)
      "insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((balance-serializer (make-serializer)))
   (define (dispatch m)
     (cond ((eq? m 'withdraw)withdraw)
           ((eq? m 'deposit )deposit)
           ((eq? m 'balance )balance)
           ((eq? m 'serializer)balance-serializer)
           (else (error "Unknown request--MAKE-ACCOUNT" m))))
   dispatch))

(define (deposit account amount)
  (let ((s (account 'serializer))
        (d (account 'deposit)))
    ((s d)amount)))

(define (serialized-exchange acc1 acc2)
  (let ((serial1 (acc1 'serializer))
        (serial2 (acc2 'serializer)))
    ((serial1 (serial2 exchange))
     acc1
     acc2)))

(define (make-serializer)
  (let ((mutex (make-mutex)))
   (lambda (p)
     (define (serialized-p . args)
       (mutex 'acquire)
       (let ((val (apply p args)))
        (mutex 'release)
        val))
     serialized-p)))

(define (make-mutex)
  (let ((cell (list #f)))
   (define (the-mutex m)
     (cond ((eq? m 'acquire)
            (if (test-and-set! cell)
              (the-mutex 'acquire)))
           ((eq? m 'release) (clear! cell))))
   the-mutex))
(define (clear! cell)
  (set-car! cell #f))
(define (test-and-set! cell)
  (if (car cell)
    #t
    (begin (set-car! cell #t)
           #f)))
