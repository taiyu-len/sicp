; extend the evaluator in this section to support the special form let (see 4.6)

(define (let? exp) (tagged-list? exp 'let))
(define (let-vars exp) (map car  (cadr exp)))
(define (let-init exp) (map cadr (cadr exp)))
(define (let-body exp) (cddr exp))
(define (named-let? exp) (symbol? (cadr exp)))
(define (named-let-name exp) (cadr exp))
(define (named-let-body exp) (cadddr exp))
(define (named-let-args exp) (map car (caddr exp)))
(define (named-let-init exp) (map cadr (caddr exp)))
(define (named-let->func exp)
  (list 'define
        (cons (named-let-name exp) (named-let-args exp))
        (named-let-body exp)))
(define (let->combination exp)
  (if (named-let? exp)
   (sequence->exp
      (list (named-let->func exp)
            (cons (named-let-name exp) (named-let-init exp))))
   (cons (make-lambda (let-vars exp)
                      (list (let-body exp)))
         (let-init exp))))

(define (eval-let exp env)
  (eval (let->combination exp) env))
(define (let->combination exp)
  (cons (make-lambda (let-vars exp) (let-body exp))
        (let-init exp)))

(define (analyze exp)
  (cond ((self-evaluating? exp)
         (analyze-self-evaluating exp))
        ((quoted? exp) (analyze-quoted exp))
        ((variable? exp) (analyze-variable exp))
        ((assignment? exp) (analyze-assignment exp))
        ((definition? exp) (analyze-definition exp))
        ((if? exp) (analyze-if exp))
        ((let? exp) (analyze (let->combination exp)))
        ((lambda? exp) (analyze-lambda exp))
        ((begin? exp) (analyze-sequence (begin-actions exp)))
        ((cond? exp) (analyze (cond-if exp)))
        ((application? exp) (analyze-application exp))
        (else
          (error "1:Unknown expression type -- ANALYZE"))))
